package per.iys.crm.workbench.mapper;

import org.apache.ibatis.annotations.Mapper;
import per.iys.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

@Mapper
public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Sun Apr 17 20:16:38 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Sun Apr 17 20:16:38 CST 2022
     */
    int insertSelective(Activity row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Sun Apr 17 20:16:38 CST 2022
     */
    int updateByPrimaryKeySelective(Activity row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbg.generated Sun Apr 17 20:16:38 CST 2022
     */
    int updateByPrimaryKey(Activity row);

    /**
     * 插入 创建的市场活动记录
     *
     * @param activity 市场活动domain
     * @return 成功操作数量
     */
    int insertActivity(Activity activity);

    /**
     * 按页面条件选择市场活动.
     *
     * @param map key: name, owner, startDate, endDate, beginNo, pageSize.
     * @return 市场活动List集合
     */
    List<Activity> selectActivityByConditionForPage(Map<String, Object> map);

    /**
     * 按条件选择市场活动条数.
     *
     * @param map key: name, owner, startDate, endDate
     * @return 市场活动记录条数
     */
    int selectCountOfActivityByCondition(Map<String, Object> map);

    /**
     * 按ids批量删除市场活动
     *
     * @param ids 市场活动id数组
     * @return
     */
    int deleteActivityByIds(String[] ids);

    /**
     * 根据id来查询市场活动的信息.
     *
     * @param id 市场活动id
     * @return 实体类
     */
    Activity selectActivityById(String id);

    /**
     * 根据id更新市场活动信息
     *
     * @param activity 市场活动信息
     * @return 成功操作数
     */
    int updateActivityById(Activity activity);

    /**
     * 查询所有市场活动
     *
     * @return 市场活动list集合
     */
    List<Activity> selectAllActivities();

    /**
     * 根据多个id查询市场活动
     *
     * @param ids 用户id数组
     * @return 市场活动List集合
     */
    List<Activity> selectActivitiesByIds(String[] ids);

    /**
     * 批量插入市场活动
     *
     * @param activityList 市场活动list集合
     * @return 操作的记录条数, 如果返回0表示 操作失败.
     */
    int insertActivityByList(List<Activity> activityList);

    /**
     * 查询单条市场活动明细
     *
     * @param id 单条市场活动的id
     * @return 市场活动明细
     */
    Activity selectActivityForDetailById(String id);

    /**
     * 根据线索的id查询市场活动明细
     *
     * @param clueId 线索id
     * @return 市场活动明细
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);

    /**
     * 根据name模糊查询市场活动, 并且把已经与clueId关联过的市场活动排除
     *
     * @param map key: activityName, clueId
     * @return 市场活动
     */
    List<Activity> selectActivityForDetailByNameClueId(Map<String, Object> map);

    /**
     * 根据id条数查询市场活动的明细信息
     *
     * @param ids
     * @return
     */
    List<Activity> selectActivityForDetailByIds(String[] ids);

    /**
     * 根据activityName模糊查询 且 与clueId关联过的市场活动
     *
     * @param map key属性名: activityName, clueId
     * @return
     */
    List<Activity> selectActivityForConvertByNameClueId(Map<String, Object> map);
}